-*-org-*-

* classes?
  - Signature: calculate and persist signatures and weights for nodes in a single document
  - Match:     represents a match between two nodes
  - MatchSet:  composed of Signatures and Matches.
  - Matcher:   an algorithm that operates on a MatchSet statelessly to generate matches.
  - Generator: generates a DeltaSet from a MatchSet
  - Delta:     an atomic change step
  - DeltaSet:  an ordered set of Deltas
  - Apply:     f(doc1, DeltaSet) -> doc2
* hoe params
* license
* rdocs
* readme
* gemcutter
* pick a hashing algorithm
  - ruby hash / md5 / sha1
  - benchmark? collision rate?
* build an rspec matcher for xml
* build a test/unit assertion for xml
* Signature should have methods and not raw hash accessors
* MatchSet#complement needs to be O(1) not O(nmatches)
* matchers should be idempotent -- skip nodes if they are already matched
* algorithmic notes
*** ignoring ID
    - too many web sites fuck that up
    - libxml2 allows duplicate ids
    - algorithm would ignore changed content (I think?)
*** indexes (ascendant lookahead) needs to be implemented?
*** if we do "phase 3" in weight-order, and recursively match parents, can't we avoid the "propagate to parent" step of phase 4?
* "flavorjones" matcher
  - calculate sigs and weights
  - traverse tree in weight order. for each node:
    - find candidates
    - select best candidate based on how far up ancestor tree we can go
    - force-match all possible ancestors of best match
  - traverse force-matched nodes in weight order. for each node:
    - if there are uniquely-named pairs children, force-match them
  - generate delta:
    - each match is either exact, self-same, or same-name. the latter two are subsets of the forced-matched set.
      - same-name contains an attribute delta. self-same does not.

* delta
- modify:
    node1: \#<Nokogiri::XML::Element:...>
    node2: \#<Nokogiri::XML::Element:...>
    attributes: |-
      + foo="bar"
      - foo="bazz"
- insert:
    node2: \#<Nokogiri::XML::Element:...>
- delete:
    node1: \#<Nokogiri::XML::Element:...>

